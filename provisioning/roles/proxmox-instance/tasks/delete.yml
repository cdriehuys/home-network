- block:
  - name: Retrieve all VMs info
    ansible.builtin.uri:
      url: "https://{{ proxmox_host }}/api2/json/cluster/resources?type=vm"
      method: GET
      headers: "{{ proxmox_auth_headers }}"
    register: cluster_resources

  - name: Retrieve vm_facts
    ansible.builtin.set_fact:
      vm_facts: "{{ cluster_resources.json.data | json_query(_query_get_vmid) | first }}"
    vars:
      _query_get_vmid: "[?name=='{{ instance_hostname }}']"

- block:
  # https://pve.proxmox.com/pve-docs/api-viewer/index.html#/nodes/{node}/qemu/{vmid}/status/stop
  - name: "Force stop VM {{ instance_hostname }} (ID={{ vm_facts.vmid }})"
    ansible.builtin.uri:
      url: "https://{{ proxmox_host }}/api2/json/nodes/{{ vm_facts.node }}/{{ instance_type }}/{{ vm_facts.vmid }}/status/stop"
      method: POST
      headers: "{{ proxmox_auth_headers }}"
      body_format: form-urlencoded
    register: shutdown
  # https://pve.proxmox.com/pve-docs/api-viewer/index.html#/nodes/{node}/qemu/{vmid}/status/current
  - name: "Wait until VM is stopped before deletion"
    ansible.builtin.uri:
      url: "https://{{ proxmox_host }}/api2/json/nodes/{{ vm_facts.node }}/{{ instance_type }}/{{ vm_facts.vmid }}/status/current"
      method: GET
      headers: "{{ proxmox_auth_headers }}"
    register: vm_current_status
    until: "vm_current_status.json.data.status == 'stopped'"
    retries: 10
    delay: 3
  when: "vm_facts.status == 'running'"

- name: Delete VM {{ instance_hostname }} (ID={{ vm_facts.vmid }})
  community.general.proxmox:
    api_host: "{{ proxmox_host }}"
    api_password: "{{ proxmox_password }}"
    api_user: "{{ proxmox_user }}"
    force: true
    state: absent
    unprivileged: true
    vmid: "{{ vm_facts.vmid }}"
