#!/usr/bin/env python3

import argparse
import json
import logging
import subprocess
import sys

logger = logging.getLogger(__name__)

BASE_INVENTORY = {
    "_meta": {
        "hostvars": {},
    },
    "all": {
        "children": ["k8s", "metal"],
    },
    "k8s": {
        "children": ["k8s_server", "k8s_agents"],
    },
    "metal": {
        "children": ["proxmox", "dns"],
    },
    "proxmox": {
        "hosts": [
            "pve.lan.qidux.com",
        ]
    },
    "dns": {
        "children": [],
        "hosts": ["ns1.lan.qidux.com", "ns2.lan.qidux.com"],
    },
}


def read_vm_info() -> dict[str]:
    output = subprocess.check_output(["terraform", "output", "-json", "vms"])
    logger.debug("Received VM info: %s", output)

    return json.loads(output)


def vms_as_inventory(vms: dict[str]) -> dict[str, dict]:
    return {
        "k8s_server": {
            "children": [],
            "hosts": [vms["k8s-server"]]
        },
        "k8s_agents": {
            "children": [],
            "hosts": [ip for vm, ip in vms.items() if vm.startswith("k8s-agent")]
        },
    }


def parse_args(args: list[str]):
    parser = argparse.ArgumentParser()

    parser.add_argument("--list", action="store_true")
    parser.add_argument("--host")

    return parser.parse_args(args)


def main(args: list[str]):
    logging.basicConfig(level=logging.WARNING, stream=sys.stderr)

    parsed = parse_args(args)

    if parsed.list:
        logger.info("Listing all hosts.")
        vms = read_vm_info()
        inventory = {**BASE_INVENTORY, **vms_as_inventory(vms)}
        json.dump(inventory, sys.stdout)
    elif parsed.host:
        logger.info("Outputting variables for %s", parsed.host)
        print("{}")
    else:
        raise ValueError("Not listing or returning host vars.")


if __name__ == "__main__":
    main(sys.argv[1:])
